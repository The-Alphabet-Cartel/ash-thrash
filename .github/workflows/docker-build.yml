name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_MAIN: ${{ github.repository }}
  IMAGE_NAME_API: ${{ github.repository }}-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Convert repository name to lowercase
      id: repo-name
      run: |
        echo "main-image=$(echo '${{ env.IMAGE_NAME_MAIN }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "api-image=$(echo '${{ env.IMAGE_NAME_API }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for main image
      id: meta-main
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.repo-name.outputs.main-image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for API image
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.repo-name.outputs.api-image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push main Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta-main.outputs.tags }}
        labels: ${{ steps.meta-main.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image security scan (main)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ steps.repo-name.outputs.main-image }}:latest
        format: 'sarif'
        output: 'trivy-results-main.sarif'
      continue-on-error: true

    - name: Image security scan (API)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ steps.repo-name.outputs.api-image }}:latest
        format: 'sarif'
        output: 'trivy-results-api.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-main.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security (API)
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-api.sarif'
      continue-on-error: true

  test-images:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Convert repository name to lowercase
      id: repo-name
      run: |
        echo "main-image=$(echo '${{ env.IMAGE_NAME_MAIN }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "api-image=$(echo '${{ env.IMAGE_NAME_API }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        
    - name: Test main image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ steps.repo-name.outputs.main-image }}:latest python --version
        
    - name: Test API image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ steps.repo-name.outputs.api-image }}:latest python --version